#include<bits/stdc++.h>   // Include all standard C++ headers
#include<windows.h>        // Include the Windows header
#include <stdio.h>         // Include the standard input/output header
#include<iostream>         // Include the input/output stream header
#include<GL/glut.h>        // Include the OpenGL Utility Toolkit header
#include<math.h>           // Include the math header

//This is a point class, used to store the coordinates of the point
class Point
{
public:
    int x, y;
    void setxy(int _x, int _y)  // Set the x and y coordinates of the point
    {
        x = _x;
        y = _y;
    }
};

//Number of points
static int POINTSNUM = 0;   // Variable to track the number of points

//Used to store a collection of points, because the Bezier curves with 4 points are drawn, so the array size is 4
static Point points[4];     // Array to store the 4 points needed for the Bezier curve

//Initialization function
void init(void)
{
    glClearColor(0.0, 0.0, 0.0,0);   // Set the clear color (black)
    glColor3f(1.0, 1.0, 1.0);         // Set the drawing color (white)
    glPointSize(4.0);                 // Set the point size
    glMatrixMode(GL_PROJECTION);      // Set the matrix mode to projection
    glLoadIdentity();                 // Load the identity matrix
    gluOrtho2D(0.0, 600.0, 0.0, 480.0); //Parallel projection, the four parameters are x, y range
}

//Draw points
void setPoint(Point p)
{
    glBegin(GL_POINTS);        // Begin drawing points
    glVertex2f(p.x, p.y);      // Set the vertex for the point
    glEnd();                   // End drawing points
    glFlush();                 // Flush the buffer to display the point
}

// draw a straight line
void setline(Point p1, Point p2)
{
    glBegin(GL_LINES);         // Begin drawing lines
    glVertex2f(p1.x, p1.y);    // Set the vertex for the start point
    glVertex2f(p2.x, p2.y);    // Set the vertex for the end point
    glEnd();                   // End drawing lines
    glFlush();                 // Flush the buffer to display the line
}

// Draw Bezier curve
Point setBezier(Point p1, Point p2, Point p3, Point p4, double t)
{
    Point p;
    double a1 = pow((1 - t), 3);         // Calculate the coefficients for the Bezier curve
    double a2 = pow((1 - t), 2) * 3 * t;
    double a3 = 3 * t*t*(1 - t);
    double a4 = t * t*t;
    p.x = a1 * p1.x + a2 * p2.x + a3 * p3.x + a4 * p4.x;  // Calculate the x coordinate of the point on the curve
    p.y = a1 * p1.y + a2 * p2.y + a3 * p3.y + a4 * p4.y;  // Calculate the y coordinate of the point on the curve
    return p;
}

//display function
void display()
{
    //glClear(GL_COLOR_BUFFER_BIT); // Clear the color buffer
    //glFlush();                    // Flush the buffer
}

// mouse event
void mymouseFunction(int button, int state, int x, int y)
{
    if (state == GLUT_DOWN)    {
        points[POINTSNUM].setxy(x, 480 - y);   // Set the x and y coordinates of the point clicked by the user
        glColor3f(1.0, 0.0, 0.0);
        setPoint(points[POINTSNUM]);           // Draw the point

        glColor3f(1.0, 0.0, 0.0);
        if (POINTSNUM > 0) setline(points[POINTSNUM - 1], points[POINTSNUM]);  // Draw a line connecting the current and previous points

        if (POINTSNUM == 3) // If four points have been clicked
        {
            //Draw Bezier curve
            glColor3f(1.0, 1.0, 0.0); // Set the color of the Bezier curve

            Point p_current = points[0]; //Set as starting point
            for (double t = 0.0; t <= 1.0; t += 0.05)
            {
                Point P = setBezier(points[0], points[1], points[2], points[3], t);  // Calculate the point on the Bezier curve
                setline(p_current, P);                                                // Draw a line segment
                p_current = P;                                                         // Update the current point
            }

            POINTSNUM = 0; // Reset the number of points
        }
        else
        {
            POINTSNUM++; // Increment the number of points
        }
    }
}

int main(int argc, char *argv[])
{
    glutInit(&argc, argv);                 // Initialize GLUT
    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE); // Set the display mode
    glutInitWindowSize(600, 480);          // Set the initial window size
    glutInitWindowPosition(100, 100);      // Set the initial window position
    glutCreateWindow("Bezier curve");      // Create a window with the title "Bezier curve"

    init();                                // Call the init function to initialize OpenGL
    glutMouseFunc(mymouseFunction);        // Register the mouse function
    glutDisplayFunc(display);              // Register the display function
    glutMainLoop();                        // Enter the GLUT main loop
    return 0;                              // Return 0 to indicate successful execution
}
