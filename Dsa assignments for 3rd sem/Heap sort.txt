#include <iostream>

using namespace std;

// Function to heapify a subtree rooted with the given node
// 'n' is the size of the heap
void heapify(int arr[], int n, int rootIndex) {
    int largest = rootIndex; // Initialize largest as root
    int leftChild = 2 * rootIndex + 1; // Left child
    int rightChild = 2 * rootIndex + 2; // Right child

    // If left child is larger than root
    if (leftChild < n && arr[leftChild] > arr[largest])
        largest = leftChild;

    // If right child is larger than largest so far
    if (rightChild < n && arr[rightChild] > arr[largest])
        largest = rightChild;

    // If largest is not root, swap and continue heapifying
    if (largest != rootIndex) {
        swap(arr[rootIndex], arr[largest]);
        // Recursively heapify the affected sub-tree
        heapify(arr, n, largest);
    }
}

// Main function to perform heap sort
void heapSort(int arr[], int n) {
    // Build heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    // One by one extract an element from the heap
    for (int i = n - 1; i > 0; i--) {
        // Move current root to end
        swap(arr[0], arr[i]);

        // Call max heapify on the reduced heap
        heapify(arr, i, 0);
    }
}

int main() {
   // const int maxSize = 100; // Define a maximum size for the array
   // int arr[maxSize];
    int size;

    // Get the size of the array from the user
    cout << "Enter the size of the array (up to "  << "): ";
    cin >> size;
 int arr[size];
   

    // Input array values from the user
    cout << "Enter " << size << " elements: ";
    for (int i = 0; i < size; i++) {
        cin >> arr[i];
    }

    // Display original array
    cout << "Original array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    // Perform Heap Sort
    heapSort(arr, size);

    // Display sorted array
    cout << "Sorted array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
