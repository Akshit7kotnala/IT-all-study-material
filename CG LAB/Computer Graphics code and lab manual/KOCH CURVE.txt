#include<iostream>         // Include the input/output stream library
#include<GL/glut.h>        // Include the OpenGL Utility Toolkit library
#include<stdio.h>          // Include the standard input/output library
//#include<math.h>          // Not used in this code

using namespace std;       // Use the standard namespace

float x1, x2, y1, y2, n;   // Declare variables for start and end points of the line, and the number of iterations

void getdata()             // Function to get input from the user
{
    cout << "Enter start & end points of line: ";  // Display message to enter points
    cin >> x1 >> y1 >> x2 >> y2;                    // Read input points
    cout << "Enter number of iterations: ";        // Display message to enter number of iterations
    cin >> n;                                      // Read number of iterations
}

void koch(float x1, float y1, float x2, float y2, float n)  // Function to recursively draw the Koch curve
{
    float ang = 60;                                      // Set angle for Koch curve
    ang = ang * 3.14 / 180;                              // Convert angle to radians
    float x3 = (2 * x1 + x2) / 3;                        // Calculate intermediate point x3
    float y3 = (2 * y1 + y2) / 3;                        // Calculate intermediate point y3
    float x4 = (x1 + 2 * x2) / 3;                        // Calculate intermediate point x4
    float y4 = (y1 + 2 * y2) / 3;                        // Calculate intermediate point y4
    float x = x3 + (x4 - x3) * 0.5 + (y4 - y3) * 0.8660; // Calculate new point x
    float y = y3 - (x4 - x3) * 0.8660 + (y4 - y3) * 0.5; // Calculate new point y

    if (n > 0)                                           // If iterations remaining, recursively call koch function
    {
        koch(x1, y1, x3, y3, n - 1);                     // Call koch function for first segment
        koch(x3, y3, x, y, n - 1);                       // Call koch function for second segment
        koch(x, y, x4, y4, n - 1);                       // Call koch function for third segment
        koch(x4, y4, x2, y2, n - 1);                     // Call koch function for fourth segment
    }
    else                                                 // If no iterations remaining, draw the line segment
    {
        glBegin(GL_LINE_STRIP);                          // Begin drawing line strip
        glClearColor(1.0, 1.0, 1.0, 0.0);                // Set clear color
        glColor3f(0.0, 1.0, 1.0);                        // Set line color
        glVertex2f(x1, y1);                              // Set vertex for start point
        glColor3f(0.0, 1.0, 1.0);                        // Set line color
        glVertex2f(x3, y3);                              // Set vertex for intermediate point
        glColor3f(1.0, 1.0, 0.0);                        // Set line color
        glVertex2f(x, y);                                // Set vertex for new point
        glColor3f(1.0, 0.0, 1.0);                        // Set line color
        glVertex2f(x4, y4);                              // Set vertex for another intermediate point
        glColor3f(1.0, 1.0, 1.0);                        // Set line color
        glVertex2f(x2, y2);                              // Set vertex for end point
        glEnd();                                         // End drawing line strip
    }
}

void Init()                      // Function to initialize OpenGL settings
{
    glClearColor(0.0, 0.0, 0.0, 0.0);   // Set clear color
    glColor3f(0.0, 0.0, 0.0);           // Set default color
    gluOrtho2D(0.0, 640.0, 480.0, 0.0); // Set orthographic projection
}

void display()                    // Function to display the Koch curve
{
    glClear(GL_COLOR_BUFFER_BIT); // Clear the color buffer
    koch(x1, y1, x2, y2, n);       // Call the koch function to draw the curve
    glFlush();                     // Flush the buffer to display the curve
}

int main(int argv, char **argc)  // Main function
{
    getdata();                       // Call the getdata function to get user input
    glutInit(&argv, argc);           // Initialize GLUT
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);  // Set display mode
    glutInitWindowPosition(100, 100);  // Set window position
    glutInitWindowSize(640, 480);      // Set window size
    glutCreateWindow("KOCH");          // Create a window with title "KOCH"
    Init();                            // Call the Init function to initialize OpenGL
    glutDisplayFunc(display);          // Register the display function
    glutMainLoop();                    // Enter the GLUT main loop
    return 0;                          // Return 0 to indicate successful execution
}
