#include <bits/stdc++.h>
#include<iostream>

using namespace std;

class kruskal {

private:
    int id[10000];  // Array to store parent information for each node
    pair<long long, pair<int, int>> p[10000];  // Array to store edges with weights
    int nodes;  // Number of nodes in the graph
    int edges;  // Number of edges in the graph

public:
    // Constructor to initialize the graph and sort the edges based on weights
    kruskal() {
        cout << "Enter the number of nodes:" << endl;
        cin >> nodes;
        cout << "Enter the number of edges:" << endl;
        cin >> edges;

        for (int i = 0; i < edges; i++) {
            int a, b, c;
            cout << "Enter both nodes:" << endl;
            cin >> a >> b;
            cout << "Enter the weight:" << endl;
            cin >> c;

            p[i] = make_pair(c, make_pair(a, b));
        }
        sort(p, p + edges);  // Sorting edges based on weights
    }

    // Function to display the edges with weights
    void checking() {
        for (int i = 0; i < edges; i++) {
            cout << p[i].first << " " << p[i].second.first << " " << p[i].second.second << endl;
        }
    }

    // Function to initialize the parent array
    void initialise() {
        for (int i = 0; i < 10000; i++) {
            id[i] = i;  // Each node is initially its own parent
        }
    }

    // Function to find the root (parent) of a node using path compression
    int root(int x) {
        while (id[x] != x) {
            id[x] = id[id[x]];  // Path compression by pointing each node directly to its root
            x = id[x];
        }
        return x;
    }

    // Function to perform union operation for Kruskal's algorithm
    void union_for_kruskal(int x, int y) {
        int p = root(x);
        int q = root(y);
        id[p] = id[q];  // Setting the root of x as the parent of y
    }

    // Function to find the Minimum Spanning Tree (MST) using Kruskal's algorithm
    void mst_kruskal() {
        int x, y;
        initialise();  // Initialize parent array
        long long cost = 0;  // Variable to store the total cost of MST
        long long mincost = 0;  // Variable to store the minimum cost of MST

        // Iterate through sorted edges
        for (int i = 0; i < edges; i++) {
            x = p[i].second.first;
            y = p[i].second.second;
            cost = p[i].first;

            // If including the edge (x, y) doesn't form a cycle, include it in MST
            if (root(x) != root(y)) {
                mincost += cost;
                union_for_kruskal(x, y);
            }
        }

        cout << "The minimum cost is " << mincost << endl;
    }
};

int main() {
    kruskal k;
    k.mst_kruskal();
    return 0;
}